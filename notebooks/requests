{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f12cbc9a-b389-47c5-8ac7-e05685df8800",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "41998f95-094b-4986-a194-8c209253e3a3",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import requests\n",
    "import json\n",
    "from IPython.core.display import display\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1c9ae110-307d-4da9-83f5-07e905fab726",
   "metadata": {},
   "outputs": [],
   "source": [
    "r = requets.get(http/)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de755f4e-6aaf-48be-8b8e-90144cfcd71b",
   "metadata": {},
   "outputs": [],
   "source": [
    "stappen\n",
    "1 Make request to a public api\n",
    "\n",
    "check:\n",
    "    1. statuscode\n",
    "    e. contenttype\n",
    "    3. print content type\n",
    "    4. parse content type to python reprentation\n",
    "    5. \n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3373176-13e5-4fe8-8213-57f3a926338b",
   "metadata": {},
   "outputs": [],
   "source": [
    ">>> import requests\n",
    ">>> r = requests.get('https://httpbin.org/basic-auth/user/pass', auth=('user', 'pass'))\n",
    ">>> r.status_code\n",
    "200\n",
    ">>> r.headers['content-type']\n",
    "'application/json; charset=utf8'\n",
    ">>> r.encoding\n",
    "'utf-8'\n",
    ">>> r.text\n",
    "'{\"authenticated\": true, ...'\n",
    ">>> r.json()\n",
    "{'authenticated': True, ...}\n",
    "\n",
    ">>> r = requests.get('https://api.github.com/user', auth=('user', 'pass'))\n",
    ">>> r.status_code\n",
    "200\n",
    ">>> r.headers['content-type']\n",
    "'application/json; charset=utf8'\n",
    ">>> r.encoding\n",
    "'utf-8'\n",
    ">>> r.text\n",
    "'{\"type\":\"User\"...'\n",
    ">>> r.json()\n",
    "{'private_gists': 419, 'total_private_repos': 77, ...}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "42f0fe74-2d05-48b0-bb9e-5026fcfd11f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "r.headers\n",
    "cats_info = jason.loads(r.test)\n",
    "for cat in cat_info:\n",
    "    print(cat[test]) #jason opmake tabel\n",
    "r.test"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cc668d7-ccf5-42ce-9da3-5046332abcff",
   "metadata": {},
   "source": [
    "for i in range (0,20)\n",
    "    emoji = request.get(\n",
    "        emoji_html = json.loads(emoji.text)\n",
    "        print(emoji.html)\n",
    "        for html is emoji_html ('htmlCode')\n",
    "        display/HTML(f'emoji_dict["
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
